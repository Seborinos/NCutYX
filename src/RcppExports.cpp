// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// NCutY3V1
double NCutY3V1(const NumericMatrix& Cys, const NumericMatrix& Cy2s, const NumericMatrix& Wys, const NumericMatrix& Wxs);
RcppExport SEXP NCutYX_NCutY3V1(SEXP CysSEXP, SEXP Cy2sSEXP, SEXP WysSEXP, SEXP WxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cys(CysSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cy2s(Cy2sSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wys(WysSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wxs(WxsSEXP);
    rcpp_result_gen = Rcpp::wrap(NCutY3V1(Cys, Cy2s, Wys, Wxs));
    return rcpp_result_gen;
END_RCPP
}
// NCut
double NCut(const NumericMatrix& Cys, const NumericMatrix& Wys);
RcppExport SEXP NCutYX_NCut(SEXP CysSEXP, SEXP WysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cys(CysSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wys(WysSEXP);
    rcpp_result_gen = Rcpp::wrap(NCut(Cys, Wys));
    return rcpp_result_gen;
END_RCPP
}
// WNCut
double WNCut(const NumericMatrix& Cys, const NumericMatrix& Cy2s, const NumericMatrix& Wys);
RcppExport SEXP NCutYX_WNCut(SEXP CysSEXP, SEXP Cy2sSEXP, SEXP WysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cys(CysSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cy2s(Cy2sSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wys(WysSEXP);
    rcpp_result_gen = Rcpp::wrap(WNCut(Cys, Cy2s, Wys));
    return rcpp_result_gen;
END_RCPP
}
// NCutLayer3V1
double NCutLayer3V1(const NumericMatrix& Cys, const NumericMatrix& Cy2s, const NumericMatrix& Wzs, const NumericMatrix& Wys, const NumericMatrix& Wxs, const NumericMatrix& Wzyxs);
RcppExport SEXP NCutYX_NCutLayer3V1(SEXP CysSEXP, SEXP Cy2sSEXP, SEXP WzsSEXP, SEXP WysSEXP, SEXP WxsSEXP, SEXP WzyxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cys(CysSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cy2s(Cy2sSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wzs(WzsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wys(WysSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wxs(WxsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Wzyxs(WzyxsSEXP);
    rcpp_result_gen = Rcpp::wrap(NCutLayer3V1(Cys, Cy2s, Wzs, Wys, Wxs, Wzyxs));
    return rcpp_result_gen;
END_RCPP
}
// Penal
NumericMatrix Penal(const NumericMatrix& Cys);
RcppExport SEXP NCutYX_Penal(SEXP CysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Cys(CysSEXP);
    rcpp_result_gen = Rcpp::wrap(Penal(Cys));
    return rcpp_result_gen;
END_RCPP
}
// Ranking
double Ranking(const NumericMatrix& C);
RcppExport SEXP NCutYX_Ranking(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(Ranking(C));
    return rcpp_result_gen;
END_RCPP
}
// oneMultinomCalt
IntegerVector oneMultinomCalt(NumericVector probs);
RcppExport SEXP NCutYX_oneMultinomCalt(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(oneMultinomCalt(probs));
    return rcpp_result_gen;
END_RCPP
}
// RandomMatrix
IntegerMatrix RandomMatrix(const int& p, const int& K, const NumericMatrix& P);
RcppExport SEXP NCutYX_RandomMatrix(SEXP pSEXP, SEXP KSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(RandomMatrix(p, K, P));
    return rcpp_result_gen;
END_RCPP
}
// RandomMatrix2
NumericMatrix RandomMatrix2(const int& p, const int& K, const NumericMatrix& P);
RcppExport SEXP NCutYX_RandomMatrix2(SEXP pSEXP, SEXP KSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(RandomMatrix2(p, K, P));
    return rcpp_result_gen;
END_RCPP
}
// RandomUnifMatrix
NumericMatrix RandomUnifMatrix(const int& p, const int& K, const NumericMatrix& Pmin, const NumericMatrix& Pmax);
RcppExport SEXP NCutYX_RandomUnifMatrix(SEXP pSEXP, SEXP KSEXP, SEXP PminSEXP, SEXP PmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Pmin(PminSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Pmax(PmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(RandomUnifMatrix(p, K, Pmin, Pmax));
    return rcpp_result_gen;
END_RCPP
}
// COR
Eigen::MatrixXd COR(const Eigen::MatrixXd& X);
RcppExport SEXP NCutYX_COR(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(COR(X));
    return rcpp_result_gen;
END_RCPP
}
// CORYX
NumericMatrix CORYX(const NumericMatrix& Zs, const NumericMatrix& Ys, const NumericMatrix& Xs);
RcppExport SEXP NCutYX_CORYX(SEXP ZsSEXP, SEXP YsSEXP, SEXP XsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Zs(ZsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Xs(XsSEXP);
    rcpp_result_gen = Rcpp::wrap(CORYX(Zs, Ys, Xs));
    return rcpp_result_gen;
END_RCPP
}
// CORYX2
NumericMatrix CORYX2(const NumericMatrix& Zs, const NumericMatrix& Ys, const NumericMatrix& Xs);
RcppExport SEXP NCutYX_CORYX2(SEXP ZsSEXP, SEXP YsSEXP, SEXP XsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Zs(ZsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Xs(XsSEXP);
    rcpp_result_gen = Rcpp::wrap(CORYX2(Zs, Ys, Xs));
    return rcpp_result_gen;
END_RCPP
}
// COR2
NumericMatrix COR2(const NumericMatrix& Xs);
RcppExport SEXP NCutYX_COR2(SEXP XsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Xs(XsSEXP);
    rcpp_result_gen = Rcpp::wrap(COR2(Xs));
    return rcpp_result_gen;
END_RCPP
}
// matrixMAX
NumericMatrix matrixMAX(const NumericMatrix& A1, const NumericMatrix& A2);
RcppExport SEXP NCutYX_matrixMAX(SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A2(A2SEXP);
    rcpp_result_gen = Rcpp::wrap(matrixMAX(A1, A2));
    return rcpp_result_gen;
END_RCPP
}
// matrixMIN
NumericMatrix matrixMIN(const NumericMatrix& A1, const NumericMatrix& A2);
RcppExport SEXP NCutYX_matrixMIN(SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A2(A2SEXP);
    rcpp_result_gen = Rcpp::wrap(matrixMIN(A1, A2));
    return rcpp_result_gen;
END_RCPP
}
// samplingncut
List samplingncut(const NumericMatrix& W, const NumericMatrix& Prob, const int& p, const int& K, const int& N);
RcppExport SEXP NCutYX_samplingncut(SEXP WSEXP, SEXP ProbSEXP, SEXP pSEXP, SEXP KSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Prob(ProbSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(samplingncut(W, Prob, p, K, N));
    return rcpp_result_gen;
END_RCPP
}
// cutoff
double cutoff(NumericVector& loss, const int& q0);
RcppExport SEXP NCutYX_cutoff(SEXP lossSEXP, SEXP q0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type loss(lossSEXP);
    Rcpp::traits::input_parameter< const int& >::type q0(q0SEXP);
    rcpp_result_gen = Rcpp::wrap(cutoff(loss, q0));
    return rcpp_result_gen;
END_RCPP
}
// ProbAve
NumericMatrix ProbAve(List& Cs, IntegerVector& Ind, const int& p, const int& K);
RcppExport SEXP NCutYX_ProbAve(SEXP CsSEXP, SEXP IndSEXP, SEXP pSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type Cs(CsSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type Ind(IndSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(ProbAve(Cs, Ind, p, K));
    return rcpp_result_gen;
END_RCPP
}
// Indexing
IntegerVector Indexing(NumericVector& loss, const double& qloss);
RcppExport SEXP NCutYX_Indexing(SEXP lossSEXP, SEXP qlossSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type loss(lossSEXP);
    Rcpp::traits::input_parameter< const double& >::type qloss(qlossSEXP);
    rcpp_result_gen = Rcpp::wrap(Indexing(loss, qloss));
    return rcpp_result_gen;
END_RCPP
}
// ncutcem
List ncutcem(const NumericMatrix& W, const int& p, const int& K, const int& N, const int& B, const int& q0, const double& p0);
RcppExport SEXP NCutYX_ncutcem(SEXP WSEXP, SEXP pSEXP, SEXP KSEXP, SEXP NSEXP, SEXP BSEXP, SEXP q0SEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const int& >::type q0(q0SEXP);
    Rcpp::traits::input_parameter< const double& >::type p0(p0SEXP);
    rcpp_result_gen = Rcpp::wrap(ncutcem(W, p, K, N, B, q0, p0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"NCutYX_NCutY3V1", (DL_FUNC) &NCutYX_NCutY3V1, 4},
    {"NCutYX_NCut", (DL_FUNC) &NCutYX_NCut, 2},
    {"NCutYX_WNCut", (DL_FUNC) &NCutYX_WNCut, 3},
    {"NCutYX_NCutLayer3V1", (DL_FUNC) &NCutYX_NCutLayer3V1, 6},
    {"NCutYX_Penal", (DL_FUNC) &NCutYX_Penal, 1},
    {"NCutYX_Ranking", (DL_FUNC) &NCutYX_Ranking, 1},
    {"NCutYX_oneMultinomCalt", (DL_FUNC) &NCutYX_oneMultinomCalt, 1},
    {"NCutYX_RandomMatrix", (DL_FUNC) &NCutYX_RandomMatrix, 3},
    {"NCutYX_RandomMatrix2", (DL_FUNC) &NCutYX_RandomMatrix2, 3},
    {"NCutYX_RandomUnifMatrix", (DL_FUNC) &NCutYX_RandomUnifMatrix, 4},
    {"NCutYX_COR", (DL_FUNC) &NCutYX_COR, 1},
    {"NCutYX_CORYX", (DL_FUNC) &NCutYX_CORYX, 3},
    {"NCutYX_CORYX2", (DL_FUNC) &NCutYX_CORYX2, 3},
    {"NCutYX_COR2", (DL_FUNC) &NCutYX_COR2, 1},
    {"NCutYX_matrixMAX", (DL_FUNC) &NCutYX_matrixMAX, 2},
    {"NCutYX_matrixMIN", (DL_FUNC) &NCutYX_matrixMIN, 2},
    {"NCutYX_samplingncut", (DL_FUNC) &NCutYX_samplingncut, 5},
    {"NCutYX_cutoff", (DL_FUNC) &NCutYX_cutoff, 2},
    {"NCutYX_ProbAve", (DL_FUNC) &NCutYX_ProbAve, 4},
    {"NCutYX_Indexing", (DL_FUNC) &NCutYX_Indexing, 2},
    {"NCutYX_ncutcem", (DL_FUNC) &NCutYX_ncutcem, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_NCutYX(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
